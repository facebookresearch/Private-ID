//  Copyright (c) Facebook, Inc. and its affiliates.
//  SPDX-License-Identifier: Apache-2.0

syntax = "proto3";
package dspmchelper;

import "common.proto";

message Init {}
message InitAck {}
message SendData {}
message SendDataAck {}
message UHelperAck {}
message EHelperAck {}
message UPartnerAck {}
message VPartnerAck {}
message SPartnerAck {}
message SPrimePartnerAck {}
message CompanyPublicKeyAck {}
message PartnerPublicKeyAck {}
message CalculateIdMapAck {}
message CalculateFeaturesXorSharesAck {}
message Commitment {}
message CommitmentAck {}

message ServiceResponse {
    oneof Ack {
        Init init = 1;
        InitAck init_ack = 2;
        UHelperAck u_helper_ack = 3;
        EHelperAck e_helper_ack = 5;
        UPartnerAck u_partner_ack = 6;
        VPartnerAck v_partner_ack = 7;
        SPartnerAck s_partner_ack = 8;
        SPrimePartnerAck s_prime_partner_ack = 9;
        PartnerPublicKeyAck partner_public_key_ack = 10;
        CalculateIdMapAck calculate_id_map_ack = 12;
        CalculateFeaturesXorSharesAck calculate_features_xor_shares_ack = 13;
        Commitment commitment = 14;
        CompanyPublicKeyAck company_public_key_ack = 15;
        SendData send_data = 16;
        SendDataAck send_data_ack = 17;
    }
}

service DspmcHelper {
    rpc SendCompanyPublicKey(stream common.Payload) returns(ServiceResponse) {}
    rpc SendEncryptedVprime(stream common.Payload) returns(ServiceResponse) {}
    rpc SendEncryptedKeys(stream common.Payload) returns(ServiceResponse) {}
    rpc SendCt3PCdVCd(stream common.Payload) returns(ServiceResponse) {}
    rpc SendU1(stream common.Payload) returns(ServiceResponse) {}
    rpc SendPSdVSd(stream common.Payload) returns(ServiceResponse) {}

    rpc RecvHelperPublicKey(ServiceResponse) returns(stream common.Payload) {}
    rpc RecvXorShares(ServiceResponse) returns(stream common.Payload) {}
    rpc RecvU2(ServiceResponse) returns(stream common.Payload) {}

    rpc CalculateIdMap(Commitment) returns (CommitmentAck) {}
    rpc Reveal(Commitment) returns (CommitmentAck) {}
    rpc StopService(Commitment) returns (CommitmentAck) {}
}
